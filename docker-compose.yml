services:

  frontend:
    build:
      context: ./frontend  # Adjust this path to where your React app is located
      dockerfile: Dockerfile
    ports:
      - "3000:80"  # Map port 80 in the container to 3000 on the host
    networks:
      - app-network
    depends_on:
      - bff_service  # Assuming the frontend depends on the BFF service

  scheduling_service:
    build:
      context: ./scheduling_service
      dockerfile: Dockerfile
    ports:
      - "8001:8000"
    volumes:
      - .:/app
    command: uvicorn scheduling_service.src.app.main:app --host 0.0.0.0 --port 8000 --reload
    depends_on:
      kafka:
        condition: service_healthy
      scheduling_service_mongodb:
        condition: service_started
    environment:
      MONGO_HOST: "scheduling_service_mongodb"
      MONGO_PORT: "27017"
      MONGO_USER: ""
      MONGO_PASSWORD: ""
      MONGO_DB: "scheduling"
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9093"
      KAFKA_TOPIC: "scheduling-events"
      KAFKA_USER: ""
      KAFKA_PASSWORD: ""
    networks:
      - app-network

      
  scheduling_service_mongodb:
    image: mongo:6
    container_name: scheduling_service_mongodb
    ports:
      - "27011:27017"
    networks:
      - app-network


  fighter_service:
    build:
      context: ./fighter_service
      dockerfile: Dockerfile
    ports:
      - "8002:8000"
    volumes:
      - .:/app
    command: uvicorn fighter_service.src.app.main:app --host 0.0.0.0 --port 8000 --reload
    depends_on:
      kafka:
        condition: service_healthy
      fighter_service_mongodb:
        condition: service_started
    environment:
      MONGO_HOST: "fighter_service_mongodb"
      MONGO_PORT: "27017"
      MONGO_USER: ""
      MONGO_PASSWORD: ""
      MONGO_DB: "fighters"
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9093"
      KAFKA_TOPIC: "scheduling-events"
      KAFKA_USER: ""
      KAFKA_PASSWORD: ""
    networks:
      - app-network

      
  fighter_service_mongodb:
    image: mongo:6
    container_name: fighter_service_mongodb
    ports:
      - "27012:27017"
    networks:
      - app-network

  user_service:
    build:
      context: ./user_service
      dockerfile: Dockerfile
    ports:
      - "8003:8000"
    volumes:
      - .:/app
    command: uvicorn user_service.src.app.main:app --host 0.0.0.0 --port 8000 --reload
    depends_on:
      kafka:
        condition: service_healthy
      user_service_mongodb:
        condition: service_started
    environment:
      MONGO_HOST: "user_service_mongodb"
      MONGO_PORT: "27017"
      MONGO_USER: ""
      MONGO_PASSWORD: ""
      MONGO_DB: "users"
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9093"
      KAFKA_TOPIC: "user-events"
      KAFKA_USER: ""
      KAFKA_PASSWORD: ""
    networks:
      - app-network

      
  user_service_mongodb:
    image: mongo:6
    container_name: user_service_mongodb
    ports:
      - "27013:27017"
    networks:
      - app-network

  
  
  bff_service:
    build:
      context: ./bff_service
      dockerfile: Dockerfile
    ports:
      - "8004:8000"
    volumes:
      - .:/app
    command: uvicorn bff_service.src.app.main:app --host 0.0.0.0 --port 8000 --reload
    depends_on:
      kafka:
        condition: service_healthy
      bff_service_mongodb:
        condition: service_started
    environment:
      MONGO_HOST: "bff_service_mongodb"
      MONGO_PORT: "27017"
      MONGO_USER: ""
      MONGO_PASSWORD: ""
      MONGO_DB: "scheduling"
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9093"
      KAFKA_TOPIC_SCHEDULING: "scheduling-events"
      KAFKA_TOPIC_USERS: "user-events"
      KAFKA_USER: ""
      KAFKA_PASSWORD: ""
    networks:
      - app-network

      
  bff_service_mongodb:
    image: mongo:6
    container_name: bff_service_mongodb
    ports:
      - "27014:27017"
    networks:
      - app-network



  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - app-network

  kafka:
    image: wurstmeister/kafka:2.13-2.8.1
    container_name: kafka
    ports:
      - "9092:9092"  # Expose the OUTSIDE listener
    networks:
      - app-network
    depends_on:
      zookeeper:
        condition: service_started
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ZOOKEEPER: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092  # Use different ports for each listener
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE  # Set the inter-broker listener name
    healthcheck:
      test: [ "CMD", "sh", "-c", "nc -z kafka 9092" ]
      interval: 30s
      timeout: 10s
      retries: 5


networks:
  app-network:
    driver: bridge
